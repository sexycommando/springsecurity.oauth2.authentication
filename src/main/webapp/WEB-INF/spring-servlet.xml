<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2
                           http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		                   http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		                   http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-3.2.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.2.xsd
		                   http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						   http://www.springframework.org/schema/tx
						   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


    <!--
    ============================================================
       Begin OAuth2 Authentication Setting
    ============================================================
    -->
    <http pattern="/resources/**" create-session="never"
          entry-point-ref="myOAuthAuthenticationEntryPoint"
          authentication-manager-ref="myOAuth2AuthenticationManager"
          access-decision-manager-ref="accessDecisionManager"
          xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/resources/**" access="SCOPE_TRUST" />
        <custom-filter ref="myOauth2ProviderFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <http pattern="/oauth/token" create-session="stateless"
          entry-point-ref="myOAuthAuthenticationEntryPoint"
          authentication-manager-ref="myClientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="myClientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <!--<http-basic entry-point-ref="clientAuthenticationEntryPoint" />-->
    </http>

    <http pattern="/logout" create-session="never"
          entry-point-ref="myOAuthAuthenticationEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/logout" method="GET" />
        <!--<sec:logout invalidate-session="true" logout-url="/logout" success-handler-ref="logoutSuccessHandler" />-->
        <custom-filter ref="myOauth2ProviderFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <!-- 連携アプリ設定 -->
    <oauth:client-details-service id="myClientDetailsService" >
        <oauth:client client-id="my-auth"
                      secret="pass123"
                      scope="trust"
                      authorized-grant-types="authorization_code,implicit,password,client_credentials,refresh_token"
                      authorities="ROLE_CLIENT"
                      resource-ids="myResource" />
    </oauth:client-details-service>

    <!-- 権限設定 -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <bean id="myOAuthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

    <!-- <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="springsec/client" />
        <property name="typeName" value="Basic" />
    </bean> -->

    <bean id="myOAuth2AuthenticationManager"
          class="org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager">
        <property name="tokenServices" ref="myTokenServices"/>
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    <!--
    <bean id="logoutSuccessHandler" class="com.mycompany.apps.oauth2.authentication.security.LogoutImpl" >
        <property name="tokenstore" ref="myTokenStore" />
    </bean>
    -->

    <bean id="myClientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="myClientAuthenticationManager" />
        <property name="authenticationEntryPoint" ref="myOAuthAuthenticationEntryPoint" />
    </bean>

    <!-- ユーザアカウント 設定 -->
    <!--
    <authentication-manager id="userAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider  ref="customUserAuthenticationProvider" />
    </authentication-manager>
    <bean id="customUserAuthenticationProvider"
          class="com.mycompany.apps.oauth2.authentication.security.CustomUserAuthenticationProvider">
    </bean>
    -->
    <authentication-manager id="resourceOwner"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userDetailsService">
            <password-encoder hash="sha-256"/>
            <!-- <password-encoder ref="passwordEncoder"/> --> <!-- use BCrypt -->
        </authentication-provider>
        <!--
        <authentication-provider>
            <user-service id="userDetailsService">
                <user name="user01" password="pass01" authorities="ROLE_USER" />
                <user name="user02" password="pass02" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>
        -->
    </authentication-manager>


    <!-- ===== ===== -->
    <authentication-manager alias="authenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>
    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>
    <bean id="clientDetails"
          class="com.mycompany.apps.oauth2.authentication.security.ClientDetailsServiceImpl"/>
    <!-- ===== ===== -->

    <authentication-manager id="myClientAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="myClientDetailsUserService" />
    </authentication-manager>
    <bean id="myClientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="myClientDetailsService" />
    </bean>

    <!-- OAuth Provider 全体設定 -->
    <oauth:authorization-server
        client-details-service-ref="myClientDetailsService"
        token-services-ref="myTokenServices"
        user-approval-handler-ref="myUserApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials />
        <oauth:password authentication-manager-ref="resourceOwner"/>
    </oauth:authorization-server>
    <bean id="myUserApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="myTokenServices"/>
    </bean>

    <oauth:resource-server id="myOauth2ProviderFilter"
                           resource-id="myResource" token-services-ref="myTokenServices" />

    <bean id="myTokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="myTokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="300000"></property>
        <property name="clientDetailsService" ref="myClientDetailsService" />
    </bean>

    <bean id="myTokenStore"
          class="org.springframework.security.oauth2.provider.token.JdbcTokenStore" >
        <constructor-arg name="dataSource" ref="myDataSource"/>
    </bean>

    <!-- Request Token 設定 -->
    <bean id="myAuthorizationCodeServices"
          class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices" >
        <constructor-arg name="dataSource" ref="myDataSource"/>
    </bean>

    <bean id="userDetailsService"
          class="com.mycompany.apps.domain.services.UserDetailsServiceImpl" />
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />


    <!--
    ============================================================
       Begin RESTful JAX-RS Application Setting
    ============================================================
    -->
    <!-- Declares explicit support for annotation-driven MVC controllers  @RequestMapping, @Controller -->
    <mvc:annotation-driven />
    <mvc:default-servlet-handler />
    <bean id="MyResource" class="com.mycompany.apps.oauth2.authentication.resources.MyResource"></bean>

    <context:annotation-config />

    <context:component-scan base-package="com.mycompany.apps" />

    <context:property-placeholder location="classpath*:/META-INF/spring/*.properties" />

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mycompany.apps.domain.mappers" />
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource" />
        <property name="typeAliasesPackage" value="com.mycompany.apps.domain.entities"/>
        <property name="mapperLocations" value="classpath*:com/mycompamy/apps/domain/mappers/**/*.xml" />
    </bean>

    <bean id="myDataSource"
          class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/medbook"/>
        <property name="username" value="medbook"/>
        <property name="password" value="p@ssw0rd"/>
    </bean>
    <!--
    <bean id="myDataSource"
          class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    -->

</beans>
